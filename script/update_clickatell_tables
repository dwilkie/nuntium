require 'yaml'
require 'net/http'
require 'uri'
require 'csv'
require 'set'

require(File.join(File.dirname(__FILE__), '..', 'config', 'boot'))
require(File.join(RAILS_ROOT, 'config', 'environment'))

option_download = ARGV.any? { |x| x == '-d' }
csv_filename = File.dirname(__FILE__) + "/standard_mo_coverage.csv"

if (not option_download) and (not File.exists?(csv_filename))
  option_download = true
  puts 'forced -d option'
end

if option_download
  p "downloading clickatell mo coverage ..."
  url = URI.parse('http://www.clickatell.com/pricing/standard_mo_coverage.php?action=export&country=')
  req = Net::HTTP::Get.new("#{url.path}?#{url.query}")
  res = Net::HTTP.start(url.host, url.port) {|http|
    http.request(req)
  }

  csvFile = File.new(csv_filename, "w")
  csvFile.write(res.body)
  csvFile.close

  p "  saved at #{csv_filename}"
end

ActiveRecord::Base.transaction do
  
p "Cleaning ClickatellCoverageMO"
ClickatellCoverageMO.all.map do |c| 
  c.delete
  c.save
end

p "Saving clickatell mo coverage"

# parse clickatell mo coverage file
missing_countries = Set.new

firstRow = nil
countryRow = nil
country = nil
carrier = nil

CSV.open(csv_filename, 'r', ',') do |row|
 # empty row, skip
 next if row.size < 2
 
 # trim spaces
 row.map! { |x| x.nil? ? x : x.strip }

 # get header rows
 if firstRow.nil?
   firstRow = row
   next
 end
 
 # if is country row
 if not row[0].nil?
   countryRow = row
   
   country = Country.find_by_clickatell_name row[0]
   missing_countries << row[0] if country.nil?
   next
 end
 
 next if country.nil? # missing country => missing carrier
 carrier = Carrier.find_by_clickatell_name row[2]
 missing_countries << "#{country.clickatell_name} - #{row[2]}" if carrier.nil?
 next if carrier.nil?
 
 # otherwise is a carrier row
 ClickatellChannelHandler::CLICKATELL_NETWORKS.each do |network_key, network_desc|
   next if network_key == 'usa'
   network_column_index = firstRow.index(network_desc)
   cost = row[network_column_index]
   next if cost == 'x'
    
   ClickatellCoverageMO.create!(
    :country_id => country.id,
    :carrier_id => carrier.id,
    :network => network_key,
    :cost => cost.to_f
   )
 end
end

# force USA network shortcode coverage
# TODO should expand carriers
ClickatellCoverageMO.create!(
  :country_id => Country.find_by_iso2('US').id,
  :carrier_id => nil,
  :network => 'usa',
  :cost => 1
)

p "Updated clickatell mo coverage"

unless missing_countries.empty?
  p
  p "The following countries/carriers are missing in db:"
  p missing_countries.to_a.sort.join ", "
  p
end

end
