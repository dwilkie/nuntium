<h4>Edit AO Messages routing</h4>

<% form_for :application, :url => { :controller => 'home', :action => :update_application_ao_routing } do |f| %>
  <table>
    <tr valign="top">
      <td><%= f.text_area :ao_routing, :rows => 25, :cols => 60, :wrap => 'off' %></td>
      <td style="background-color: #E5ECF9; padding:8px;">
        <p>You can apply custom logic to incoming AO Messages by defining <b>the contents</b> of a function
        with signature <b><code>def ao_routing(msg, channels)</code></b>.</p>
        <p>Each <code>msg</code> is:</p>
        <pre class="example">class Message
  attr_accessor :from, :to, :subject, :body, :guid, :timestamp
  attr_accessor :application
end</pre>
        <p>You can query and modify any of <code>Message</code>'s accessors.</p>
        <p>The function should return:</p>
        <ul>
          <li><code>nil</code> to route the message as usual.</li>
          <li>A string that identifies a channel name.</li>
          <li>An array of strings that identifies the channel names. One of these will be chosen randomly.</li>
          <li>An array of channels. Example: <code>channels.select{|x| x.name[0].chr == 'a'}</code> will route to
          channels that start with the letter 'a'.</li>
        </ul>
        <p>If you change the <code>application</code> accessor, the message will be routed to that
        other application. For example:<br/><code>msg.application = Application.find_by_name 'some_name'</code></p>
      </td>
    </tr>
  </table>
  <%= submit_tag 'Update' %>
<% end %>

<%= link_to 'Go back', :controller => :home, :action => :home %>